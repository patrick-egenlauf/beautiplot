{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to beautiplot","text":"<p>Beautiful, Consistent, and Reproducible Scientific Plots with Python.</p>"},{"location":"#what-is-beautiplot","title":"What is beautiplot?","text":"<p>beautiplot is a Python library designed to help scientists, engineers, and students create publication-ready plots with minimal effort and maximum consistency. It builds on top of Matplotlib and provides a set of high-level utilities and sensible defaults for beautiful, reproducible, and customizable figures.</p>"},{"location":"#who-is-this-for","title":"Who is this for?","text":"<ul> <li>Researchers who want their plots to look great in papers, theses, and presentations.</li> <li>Students who need to generate clear and consistent figures for reports, lab work or theses.</li> <li>Engineers and Data Scientists who value reproducibility and want to automate figure creation.</li> <li>Anyone who is tired of tweaking Matplotlib settings for every new project!</li> </ul>"},{"location":"#why-use-beautiplot","title":"Why use beautiplot?","text":"<ul> <li>Consistent Style: All plots follow a unified, professional style out of the box.</li> <li>Easy to Use: High-level functions for common tasks (subplots, color bars, labels, etc.).</li> <li>Publication-Ready: Figures are sized and formatted for scientific publishing.</li> <li>Reproducible: Centralized configuration ensures all your figures look the same, every time.</li> <li>Customizable: Start with beautiful defaults, but easily adjust every aspect of your plots \u2014 fonts, colors, sizes, and more \u2014 to match your preferences or publication requirements.</li> <li>Extensible: Built on Matplotlib \u2014 use all its power, but with better defaults.</li> </ul>"},{"location":"#whats-next","title":"What\u2019s Next?","text":"<ul> <li>Getting Started: Install beautiplot and make your first plot.</li> <li>Tutorials: Step-by-step guides for common tasks.</li> <li>API Reference: Detailed documentation for all functions.</li> </ul> <p>Make your science beautiful, reproducible, and effortless\u2014with beautiplot!</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>The package can be installed via PyPI.</p> pipuv <pre><code>pip install beautiplot\n</code></pre> <pre><code>uv add beautiplot\n</code></pre> <p>Alternatively, you can clone the GitHub repository and, depending on whether you want to develop it or not, run the following command(s) in the cloned directory:</p> ApplicationDevelopment <pre><code>uv sync\n</code></pre> <pre><code>uv sync --all-groups\nuv run pre-commit install\n</code></pre>"},{"location":"getting_started/#quick-example","title":"Quick example","text":"<p>Let's start by importing <code>beautiplot</code> and <code>numpy</code>.</p> <pre><code>import beautiplot.plot as bp\nimport numpy as np\n</code></pre> <p>Next, we generate some data \u2014 a damped oscillation in this case.</p> <pre><code>t = np.linspace(0, 10, 1000)\ny = 5 * np.exp(-t / 2) * np.cos(2 * np.pi * t)\n</code></pre> <p>Now, we create our first figure using the <code>newfig</code> function. At first, you need to estimate the margins, but you can adjust them later as needed. If you do not specify any margins, the figure will be trimmed to the axes, and tick labels or axis labels won't be visible.</p> <pre><code>fig, ax = bp.newfig(left=40, bottom=35)\n</code></pre> <p>We then plot the data and label the axes. You can use LaTeX syntax for labels.</p> <pre><code>ax.plot(t, y, label='Damped Oscillation')\nax.set_xlabel('Time $t$ / s')\nax.set_ylabel('Amplitude $A(t)$ / cm')\nbp.legend(ax)\n</code></pre> <p>Finally, we save the figure. Since <code>pgf</code> is used as a backend, you cannot use <code>plt.show()</code>. Instead, you must save the figure. Here, we use <code>png</code> for visualization, but for publication-quality figures, you should use <code>pdf</code>.</p> <pre><code>bp.save_figure(fig, 'damped_oscillation.png')\n</code></pre> <p></p> <p>This simple example introduces the basic functionality, but <code>beautiplot</code> truly shines in more advanced scenarios.</p> <p>For more detailed examples see the Tutorials section.</p> <p>You can find documentation for all available functions and settings in the API reference.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>beautiplot<ul> <li>_config<ul> <li>_Config</li> </ul> </li> <li>plot<ul> <li>add_arrow</li> <li>auto_xlim_aspect_1</li> <li>cbar_above</li> <li>cbar_beside</li> <li>cbar_minmax_labels</li> <li>common_lims</li> <li>discretize_colormap</li> <li>extent</li> <li>fig_hspace</li> <li>fig_wspace</li> <li>fmt_num</li> <li>imshow</li> <li>legend</li> <li>log</li> <li>markers</li> <li>newfig</li> <li>save_figure</li> <li>subfig_label</li> <li>text</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/beautiplot/","title":"beautiplot","text":""},{"location":"reference/beautiplot/#beautiplot","title":"beautiplot","text":"<p>This module provides functionalities for creating beautiful plots.</p>"},{"location":"reference/beautiplot/#beautiplot--modules","title":"Modules","text":"<ul> <li><code>config</code>: Contains configuration     settings for beautiplot.</li> <li><code>plot</code>: Contains functions for creating beautiful     plots.</li> </ul>"},{"location":"reference/beautiplot/_config/","title":"_config","text":""},{"location":"reference/beautiplot/_config/#beautiplot._config","title":"beautiplot._config","text":"<p>Configuration settings for beautiplot.</p> <p>To change the configuration settings, use the <code>config</code> object by importing it from <code>beautiplot</code>:</p> <pre><code>&gt;&gt;&gt; from beautiplot import config\n</code></pre>"},{"location":"reference/beautiplot/plot/","title":"plot","text":""},{"location":"reference/beautiplot/plot/#beautiplot.plot","title":"beautiplot.plot","text":"<p>Plotting utilities.</p>"},{"location":"reference/beautiplot/_config/_Config/","title":"<code>beautiplot._config._Config</code>","text":""},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config","title":"beautiplot._config._Config","text":"<pre><code>_Config()\n</code></pre> <p>Configuration settings for beautiplot.</p> <p>This class implements the functionality exposed via <code>beautiplot.config</code>. It provides properties and methods to configure the plotting behavior, such as font size or width of the plot. The configuration settings are initialized during import, so you can change them at any time before creating a plot.</p> Warning <p>You should never import and instantiate the <code>_Config</code> class directly, but always use the <code>config</code> object provided by the <code>beautiplot</code> module.</p> Example <p>To change the width of the plot use:</p> <pre><code>&gt;&gt;&gt; from beautiplot import config\n&gt;&gt;&gt; config.width = 400\n</code></pre> <p>The configuration settings are initialized during import.</p> Source code in <code>src/beautiplot/_config.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"The configuration settings are initialized during import.\"\"\"\n    self._pt: float = 1 / 72.27\n    self._bp: float = 1 / 72\n    self._fontsize: int = 11\n    self._fontfamily: str = 'serif'\n    self._dpi: float = 300\n    self._cmap: mcolors.Colormap = plt.get_cmap('inferno')\n    self._colorbar_width: float = 10 * self._bp\n    self._aspect: float = (1 + np.sqrt(5)) / 2\n    self._width: float = 426.79135 * self._pt\n    self._tex_preamble: str = PREAMBLE\n    self._output_path: Path = Path('')\n    self._legend_setup: dict[str, Any] = {\n        'columnspacing': 1.5,\n        'handlelength': 1.5,\n        'handletextpad': 0.5,\n        'borderaxespad': 0.2,\n    }\n    self._init_matplotlib()\n</code></pre>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.pt","title":"pt  <code>property</code>","text":"<pre><code>pt: float\n</code></pre> <p>Point size in inches.</p> <p>The point size is calculated as 1/72.27.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.bp","title":"bp  <code>property</code>","text":"<pre><code>bp: float\n</code></pre> <p>Big point size in inches.</p> <p>The big point size is calculated as 1/72.0.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.aspect","title":"aspect  <code>property</code> <code>writable</code>","text":"<pre><code>aspect: float\n</code></pre> <p>Aspect ratio of the plot.</p> <p>The default value is the golden ratio.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.cmap","title":"cmap  <code>property</code>","text":"<pre><code>cmap: Colormap\n</code></pre> <p>Colormap used for plotting.</p> <p>The default value is 'inferno'. You can set this to any colormap available in matplotlib or a custom colormap by passing a string or a <code>matplotlib.colors.Colormap</code> object to the <code>set_cmap</code> method.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.colorbar_width","title":"colorbar_width  <code>property</code> <code>writable</code>","text":"<pre><code>colorbar_width: float\n</code></pre> <p>Width of the colorbar in inches.</p> <p>The default value is 10 bp (big points), which is approximately 0.1397 inches. When setting this value, it is multiplied by the <code>bp</code> size, thus for slightly wider colorbars, you can set it to 12, which will result in a width of approximately 0.1676 inches.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.dpi","title":"dpi  <code>property</code> <code>writable</code>","text":"<pre><code>dpi: float\n</code></pre> <p>Dots per inch.</p> <p>The default value is 300.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.fontfamily","title":"fontfamily  <code>property</code> <code>writable</code>","text":"<pre><code>fontfamily: str\n</code></pre> <p>Font family used for text in the plot.</p> <p>The default value is 'serif'.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.fontsize","title":"fontsize  <code>property</code> <code>writable</code>","text":"<pre><code>fontsize: int\n</code></pre> <p>Font size used for text in the plot.</p> <p>The default value is 11.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.legend_setup","title":"legend_setup  <code>property</code>","text":"<pre><code>legend_setup: dict[str, Any]\n</code></pre> <p>Configuration for the legend.</p> <p>This dictionary contains some default settings for the legend, such as the spacing between columns and the length of the handles.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.output_path","title":"output_path  <code>property</code> <code>writable</code>","text":"<pre><code>output_path: Path\n</code></pre> <p>Output path for the plot.</p> <p>The default value is the current directory, i.e. <code>.</code>. If the output path does not exist, it will be created.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.tex_preamble","title":"tex_preamble  <code>property</code>","text":"<pre><code>tex_preamble: str\n</code></pre> <p>LaTeX preamble used for the text in the plot.</p> <p>The default value is:</p> <pre><code>\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\usepackage{unicode-math}\n\\unimathsetup{math-style=ISO}\n\\usepackage{siunitx}\n\\usepackage{mathtools}\n\\usepackage{physics}\n\\usepackage{nicefrac}\n\\frenchspacing\n\\let\\displaystyle\\textstyle\n</code></pre>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.width","title":"width  <code>property</code> <code>writable</code>","text":"<pre><code>width: float\n</code></pre> <p>Width of the plot in inches.</p> <p>The default value is 5.90551 inches, which corresponds to 426.79135 pt. You can set this to the text width of your document. To obtain the text width, use</p> <pre><code>\\the\\textwidth\n</code></pre> <p>in your LaTeX document. This will return the text width in pt and you can set the width of the plot to this value. It will automatically be converted to inches.</p>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.set_cmap","title":"set_cmap","text":"<pre><code>set_cmap(value: str | Colormap) -&gt; None\n</code></pre> <p>Set the colormap used for plotting.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>str | Colormap</code>)           \u2013            <p>Colormap to use.</p> </li> </ul> Source code in <code>src/beautiplot/_config.py</code> <pre><code>def set_cmap(self, value: str | mcolors.Colormap) -&gt; None:\n    \"\"\"Set the colormap used for plotting.\n\n    Args:\n        value: Colormap to use.\n    \"\"\"\n    self._cmap = plt.get_cmap(value) if isinstance(value, str) else value\n</code></pre>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.add_legend_setup","title":"add_legend_setup","text":"<pre><code>add_legend_setup(key: str, value: Any) -&gt; None\n</code></pre> <p>Add or update a key-value pair in the legend setup.</p> <p>Parameters:</p> <ul> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>Key to add.</p> </li> <li> <code>value</code>               (<code>Any</code>)           \u2013            <p>Value to add.</p> </li> </ul> Source code in <code>src/beautiplot/_config.py</code> <pre><code>def add_legend_setup(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add or update a key-value pair in the legend setup.\n\n    Args:\n        key (str): Key to add.\n        value (Any): Value to add.\n    \"\"\"\n    self._legend_setup[key] = value\n</code></pre>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.remove_legend_setup","title":"remove_legend_setup","text":"<pre><code>remove_legend_setup(key: str) -&gt; None\n</code></pre> <p>Remove a key-value pair from the legend setup.</p> <p>Parameters:</p> <ul> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>Key to remove.</p> </li> </ul> Source code in <code>src/beautiplot/_config.py</code> <pre><code>def remove_legend_setup(self, key: str) -&gt; None:\n    \"\"\"Remove a key-value pair from the legend setup.\n\n    Args:\n        key (str): Key to remove.\n    \"\"\"\n    if key in self._legend_setup:\n        del self._legend_setup[key]\n    else:\n        raise KeyError(f\"Key '{key}' not found in legend setup.\")\n</code></pre>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.empty_legend_setup","title":"empty_legend_setup","text":"<pre><code>empty_legend_setup() -&gt; None\n</code></pre> <p>Empty the legend setup.</p> <p>This will remove all key-value pairs from the legend setup.</p> Source code in <code>src/beautiplot/_config.py</code> <pre><code>def empty_legend_setup(self) -&gt; None:\n    \"\"\"Empty the legend setup.\n\n    This will remove all key-value pairs from the legend setup.\n    \"\"\"\n    self._legend_setup.clear()\n</code></pre>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.add_usepackage","title":"add_usepackage","text":"<pre><code>add_usepackage(package: str) -&gt; None\n</code></pre> <p>Add a LaTeX package to the preamble.</p> <p>You can find the default preamble in the <code>tex_preamble</code> property.</p> <p>Parameters:</p> <ul> <li> <code>package</code>               (<code>str</code>)           \u2013            <p>LaTeX package to add.</p> </li> </ul> Example <p>To add the bm package to the preamble use:</p> <pre><code>&gt;&gt;&gt; from beautiplot import config\n&gt;&gt;&gt; config.add_usepackage('bm')\n</code></pre> Source code in <code>src/beautiplot/_config.py</code> <pre><code>def add_usepackage(self, package: str) -&gt; None:\n    \"\"\"Add a LaTeX package to the preamble.\n\n    You can find the default preamble in the\n    [`tex_preamble`][beautiplot._config._Config.tex_preamble]\n    property.\n\n    Args:\n        package (str): LaTeX package to add.\n\n    Example:\n        To add the bm package to the preamble use:\n\n        ```python\n        &gt;&gt;&gt; from beautiplot import config\n        &gt;&gt;&gt; config.add_usepackage('bm')\n        ```\n    \"\"\"\n    self._tex_preamble = (\n        self._tex_preamble + rf\"\"\"\\usepackage{{{package}}}\"\"\" + '\\n'\n    )\n    self._init_matplotlib()\n</code></pre>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.remove_usepackage","title":"remove_usepackage","text":"<pre><code>remove_usepackage(package: str) -&gt; None\n</code></pre> <p>Remove a LaTeX package from the preamble.</p> <p>You can find the default preamble in the <code>tex_preamble</code> property.</p> <p>Parameters:</p> <ul> <li> <code>package</code>               (<code>str</code>)           \u2013            <p>LaTeX package to remove.</p> </li> </ul> Example <p>To remove the amsmath package from the preamble use:</p> <pre><code>&gt;&gt;&gt; from beautiplot import config\n&gt;&gt;&gt; config.remove_usepackage('amsmath')\n</code></pre> Source code in <code>src/beautiplot/_config.py</code> <pre><code>def remove_usepackage(self, package: str) -&gt; None:\n    \"\"\"Remove a LaTeX package from the preamble.\n\n    You can find the default preamble in the\n    [`tex_preamble`][beautiplot._config._Config.tex_preamble]\n    property.\n\n    Args:\n        package (str): LaTeX package to remove.\n\n    Example:\n        To remove the amsmath package from the preamble use:\n\n        ```python\n        &gt;&gt;&gt; from beautiplot import config\n        &gt;&gt;&gt; config.remove_usepackage('amsmath')\n        ```\n    \"\"\"\n    self._tex_preamble = self._tex_preamble.replace(\n        rf\"\"\"\\usepackage{{{package}}}\"\"\" + '\\n', ''\n    )\n    self._init_matplotlib()\n</code></pre>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.add_preamble","title":"add_preamble","text":"<pre><code>add_preamble(preamble: str) -&gt; None\n</code></pre> <p>Add a LaTeX preamble.</p> <p>Instead of adding a package, you can add anything to the preamble.</p> <p>You can find the default preamble in the <code>tex_preamble</code> property.</p> <p>Parameters:</p> <ul> <li> <code>preamble</code>               (<code>str</code>)           \u2013            <p>LaTeX preamble to add.</p> </li> </ul> Example <p>To add a different spacing to the preamble use:</p> <pre><code>&gt;&gt;&gt; from beautiplot import config\n&gt;&gt;&gt; config.add_preamble(r'\\frenchspacing')\n</code></pre> Source code in <code>src/beautiplot/_config.py</code> <pre><code>def add_preamble(self, preamble: str) -&gt; None:\n    r\"\"\"Add a LaTeX preamble.\n\n    Instead of adding a package, you can add anything to the\n    preamble.\n\n    You can find the default preamble in the\n    [`tex_preamble`][beautiplot._config._Config.tex_preamble]\n    property.\n\n    Args:\n        preamble (str): LaTeX preamble to add.\n\n    Example:\n        To add a different spacing to the preamble use:\n\n        ```python\n        &gt;&gt;&gt; from beautiplot import config\n        &gt;&gt;&gt; config.add_preamble(r'\\frenchspacing')\n        ```\n    \"\"\"\n    self._tex_preamble = self._tex_preamble + preamble + '\\n'\n    self._init_matplotlib()\n</code></pre>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.remove_preamble","title":"remove_preamble","text":"<pre><code>remove_preamble(preamble: str) -&gt; None\n</code></pre> <p>Remove a LaTeX preamble.</p> <p>Instead of removing a package, you can remove anything from the preamble.</p> <p>You can find the default preamble in the <code>tex_preamble</code> property.</p> <p>Parameters:</p> <ul> <li> <code>preamble</code>               (<code>str</code>)           \u2013            <p>LaTeX preamble to remove.</p> </li> </ul> Example <p>To remove the spacing command from the preamble use:</p> <pre><code>&gt;&gt;&gt; from beautiplot import config\n&gt;&gt;&gt; config.remove_preamble(r'\\frenchspacing')\n</code></pre> Source code in <code>src/beautiplot/_config.py</code> <pre><code>def remove_preamble(self, preamble: str) -&gt; None:\n    r\"\"\"Remove a LaTeX preamble.\n\n    Instead of removing a package, you can remove anything from the\n    preamble.\n\n    You can find the default preamble in the\n    [`tex_preamble`][beautiplot._config._Config.tex_preamble]\n    property.\n\n    Args:\n        preamble (str): LaTeX preamble to remove.\n\n    Example:\n        To remove the spacing command from the preamble use:\n\n        ```python\n        &gt;&gt;&gt; from beautiplot import config\n        &gt;&gt;&gt; config.remove_preamble(r'\\frenchspacing')\n        ```\n    \"\"\"\n    self._tex_preamble = self._tex_preamble.replace(preamble + '\\n', '')\n    self._init_matplotlib()\n</code></pre>"},{"location":"reference/beautiplot/_config/_Config/#beautiplot._config._Config.default","title":"default","text":"<pre><code>default() -&gt; None\n</code></pre> <p>Reset the configuration settings to their default values.</p> Example <p>To reset the configuration settings to their default values use:</p> <pre><code>&gt;&gt;&gt; from beautiplot import config\n&gt;&gt;&gt; config.default()\n</code></pre> Source code in <code>src/beautiplot/_config.py</code> <pre><code>def default(self) -&gt; None:\n    \"\"\"Reset the configuration settings to their default values.\n\n    Example:\n        To reset the configuration settings to their default values\n        use:\n\n        ```python\n        &gt;&gt;&gt; from beautiplot import config\n        &gt;&gt;&gt; config.default()\n        ```\n    \"\"\"\n    self._pt = 1 / 72.27\n    self._bp = 1 / 72\n    self._fontsize = 11\n    self._fontfamily = 'serif'\n    self._dpi = 300\n    self._cmap = plt.get_cmap('inferno')\n    self._colorbar_width = 10 * self._bp\n    self._aspect = (1 + np.sqrt(5)) / 2\n    self._width = 426.79135 * self._pt\n    self._tex_preamble = PREAMBLE\n    self._output_path = Path('')\n    self._legend_setup = {\n        'columnspacing': 1.5,\n        'handlelength': 1.5,\n        'handletextpad': 0.5,\n        'borderaxespad': 0.2,\n    }\n    self._init_matplotlib()\n</code></pre>"},{"location":"reference/beautiplot/plot/add_arrow/","title":"<code>beautiplot.plot.add_arrow</code>","text":""},{"location":"reference/beautiplot/plot/add_arrow/#beautiplot.plot.add_arrow","title":"beautiplot.plot.add_arrow","text":"<pre><code>add_arrow(\n    fig_or_ax: Figure | Axes,\n    from_pos: tuple[float, float],\n    to_pos: tuple[float, float],\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Add an arrow to a figure or axes.</p> <p>Parameters:</p> <ul> <li> <code>fig_or_ax</code>               (<code>Figure | Axes</code>)           \u2013            <p>The figure or axes to plot on.</p> </li> <li> <code>from_pos</code>               (<code>tuple[float, float]</code>)           \u2013            <p>The start position of the arrow. The coordinates should be in normalized (0 to 1) coordinates relative to the axes, where (0, 0) is the bottom left and (1, 1) is the top right.</p> </li> <li> <code>to_pos</code>               (<code>tuple[float, float]</code>)           \u2013            <p>The end position of the arrow. As with <code>from_pos</code>, the coordinates should be in normalized coordinates relative to the axes.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>matplotlib.patches.FancyArrowPatch</code>.</p> </li> </ul> Example <p>See the tutorial on how to add an arrow to a plot.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def add_arrow(\n    fig_or_ax: mfigure.Figure | matplotlib.axes.Axes,\n    from_pos: tuple[float, float],\n    to_pos: tuple[float, float],\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Add an arrow to a figure or axes.\n\n    Args:\n        fig_or_ax: The figure or axes to plot on.\n        from_pos: The start position of the arrow. The coordinates\n            should be in normalized (0 to 1) coordinates relative to the\n            axes, where (0, 0) is the bottom left and (1, 1) is the top\n            right.\n        to_pos: The end position of the arrow. As with `from_pos`, the\n            coordinates should be in normalized coordinates relative to\n            the axes.\n        **kwargs: Additional keyword arguments to pass to\n            `matplotlib.patches.FancyArrowPatch`.\n\n    Example:\n        See the tutorial on how to\n        [add an arrow to a plot](../../../tutorials/add_arrow.md).\n    \"\"\"\n    kwargs.setdefault('color', 'k')\n    kwargs.setdefault('lw', 1.5)\n    kwargs.setdefault(\n        'arrowstyle', 'fancy, head_width=6, head_length=6, tail_width=1e-12'\n    )\n    if isinstance(fig_or_ax, mfigure.FigureBase):\n        kwargs.setdefault('transform', fig_or_ax.transFigure)\n\n    fig_or_ax.add_artist(mpatches.FancyArrowPatch(from_pos, to_pos, **kwargs))\n</code></pre>"},{"location":"reference/beautiplot/plot/auto_xlim_aspect_1/","title":"<code>beautiplot.plot.auto_xlim_aspect_1</code>","text":""},{"location":"reference/beautiplot/plot/auto_xlim_aspect_1/#beautiplot.plot.auto_xlim_aspect_1","title":"beautiplot.plot.auto_xlim_aspect_1","text":"<pre><code>auto_xlim_aspect_1(ax: Axes, offset: float = 0.0) -&gt; None\n</code></pre> <p>Set the x-axis limits to maintain an aspect ratio of 1.</p> <p>This is useful whenever you want that one unit on the x-axis is the same length as one unit on the y-axis.</p> <p>Parameters:</p> <ul> <li> <code>ax</code>               (<code>Axes</code>)           \u2013            <p>The axes to set the limits for.</p> </li> <li> <code>offset</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>The offset to add to the limits.</p> </li> </ul> Example <p>See the <code>auto_xlim_aspect_1</code> example in the tutorial section.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def auto_xlim_aspect_1(ax: matplotlib.axes.Axes, offset: float = 0.0) -&gt; None:\n    \"\"\"Set the x-axis limits to maintain an aspect ratio of 1.\n\n    This is useful whenever you want that one unit on the x-axis is the\n    same length as one unit on the y-axis.\n\n    Args:\n        ax: The axes to set the limits for.\n        offset: The offset to add to the limits.\n\n    Example:\n        See the\n        [`auto_xlim_aspect_1`](../../../tutorials/auto_xlim_aspect_1.md)\n        example in the tutorial section.\n    \"\"\"\n    y_min, y_max = ax.get_ylim()\n    width, height = np.abs(ax.get_window_extent().size)\n    dx = width / height * (y_max - y_min)\n    ax.set_xlim(np.array([-0.5, +0.5]) * dx + offset)\n</code></pre>"},{"location":"reference/beautiplot/plot/cbar_above/","title":"<code>beautiplot.plot.cbar_above</code>","text":""},{"location":"reference/beautiplot/plot/cbar_above/#beautiplot.plot.cbar_above","title":"beautiplot.plot.cbar_above","text":"<pre><code>cbar_above(\n    fig: Figure,\n    axes: Axes | Sequence[Axes] | ndarray,\n    aximg: AxesImage,\n    dy: float | None = None,\n    **kwargs: Any,\n) -&gt; tuple[Colorbar, Axes]\n</code></pre> <p>Add a colorbar above the axes.</p> <p>Parameters:</p> <ul> <li> <code>fig</code>               (<code>Figure</code>)           \u2013            <p>The figure to add the colorbar to.</p> </li> <li> <code>axes</code>               (<code>Axes | Sequence[Axes] | ndarray</code>)           \u2013            <p>The axes to add the colorbar above.</p> </li> <li> <code>aximg</code>               (<code>AxesImage</code>)           \u2013            <p>The image to create the colorbar for.</p> </li> <li> <code>dy</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>The vertical spacing between the axes and the colorbar. If not given, the default spacing is used.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>fig.colorbar</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Colorbar, Axes]</code>           \u2013            <p>A tuple containing the created colorbar and the colorbar axes.</p> </li> </ul> Example <p>See the discretized colorbar tutorial.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def cbar_above(\n    fig: mfigure.Figure,\n    axes: matplotlib.axes.Axes | Sequence[matplotlib.axes.Axes] | np.ndarray,\n    aximg: matplotlib.image.AxesImage,\n    dy: float | None = None,\n    **kwargs: Any,\n) -&gt; tuple[matplotlib.colorbar.Colorbar, matplotlib.axes.Axes]:\n    \"\"\"Add a colorbar above the axes.\n\n    Args:\n        fig: The figure to add the colorbar to.\n        axes: The axes to add the colorbar above.\n        aximg: The image to create the colorbar for.\n        dy: The vertical spacing between the axes and the colorbar. If\n            not given, the default spacing is used.\n        **kwargs: Additional keyword arguments to pass to\n            `fig.colorbar`.\n\n    Returns:\n        A tuple containing the created colorbar and the colorbar axes.\n\n    Example:\n        See the\n        [discretized colorbar tutorial](../../../tutorials/discretized_colorbar.md).\n    \"\"\"  # noqa: W505\n    if isinstance(axes, np.ndarray):\n        axes = axes.ravel()\n    ax_list = axes if isinstance(axes, list | tuple | np.ndarray) else [axes]\n    pos = [ax_list[idx].get_position() for idx in (0, -1)]\n    dy = fig_hspace(ax_list[0]) if dy is None else dy\n    cax = fig.add_axes((\n        pos[0].xmin,\n        pos[0].ymax + dy,\n        pos[1].xmax - pos[0].xmin,\n        config.colorbar_width / fig.get_figheight(),\n    ))\n    cbar = fig.colorbar(aximg, cax=cax, orientation='horizontal', **kwargs)\n    cax.xaxis.set_ticks_position('top')\n    cax.xaxis.set_label_position('top')\n    return cbar, cax\n</code></pre>"},{"location":"reference/beautiplot/plot/cbar_beside/","title":"<code>beautiplot.plot.cbar_beside</code>","text":""},{"location":"reference/beautiplot/plot/cbar_beside/#beautiplot.plot.cbar_beside","title":"beautiplot.plot.cbar_beside","text":"<pre><code>cbar_beside(\n    fig: Figure,\n    axes: Axes | Sequence[Axes],\n    aximg: AxesImage,\n    dx: float | None = None,\n    **kwargs: Any,\n) -&gt; tuple[Colorbar, Axes]\n</code></pre> <p>Add a colorbar beside the axes.</p> <p>Parameters:</p> <ul> <li> <code>fig</code>               (<code>Figure</code>)           \u2013            <p>The figure to add the colorbar to.</p> </li> <li> <code>axes</code>               (<code>Axes | Sequence[Axes]</code>)           \u2013            <p>The axes to add the colorbar beside.</p> </li> <li> <code>aximg</code>               (<code>AxesImage</code>)           \u2013            <p>The image to create the colorbar for.</p> </li> <li> <code>dx</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>The horizontal spacing between the axes and the colorbar. If not given, the default spacing is used.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>fig.colorbar</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Colorbar, Axes]</code>           \u2013            <p>A tuple containing the created colorbar and the colorbar axes.</p> </li> </ul> Example <p>See the tutorial on how to create a shared colorbar.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def cbar_beside(\n    fig: mfigure.Figure,\n    axes: matplotlib.axes.Axes | Sequence[matplotlib.axes.Axes],\n    aximg: matplotlib.image.AxesImage,\n    dx: float | None = None,\n    **kwargs: Any,\n) -&gt; tuple[matplotlib.colorbar.Colorbar, matplotlib.axes.Axes]:\n    \"\"\"Add a colorbar beside the axes.\n\n    Args:\n        fig: The figure to add the colorbar to.\n        axes: The axes to add the colorbar beside.\n        aximg: The image to create the colorbar for.\n        dx: The horizontal spacing between the axes and the colorbar. If\n            not given, the default spacing is used.\n        **kwargs: Additional keyword arguments to pass to\n            `fig.colorbar`.\n\n    Returns:\n        A tuple containing the created colorbar and the colorbar axes.\n\n    Example:\n        See the tutorial on how to create a\n        [shared colorbar](../../../tutorials/shared_colorbar.md).\n    \"\"\"\n    if isinstance(axes, np.ndarray):\n        axes = axes.ravel()\n    ax_list = axes if isinstance(axes, list | tuple | np.ndarray) else [axes]\n    pos = [ax_list[idx].get_position() for idx in (0, -1)]\n    dx = fig_wspace(ax_list[0]) if dx is None else dx\n    cax = fig.add_axes((\n        pos[1].xmax + dx,\n        pos[1].ymin,\n        config.colorbar_width / fig.get_figwidth(),\n        pos[0].ymax - pos[1].ymin,\n    ))\n    cbar = fig.colorbar(aximg, cax=cax, orientation='vertical', **kwargs)\n    return cbar, cax\n</code></pre>"},{"location":"reference/beautiplot/plot/cbar_minmax_labels/","title":"<code>beautiplot.plot.cbar_minmax_labels</code>","text":""},{"location":"reference/beautiplot/plot/cbar_minmax_labels/#beautiplot.plot.cbar_minmax_labels","title":"beautiplot.plot.cbar_minmax_labels","text":"<pre><code>cbar_minmax_labels(\n    cbar: Colorbar,\n    labels: Sequence[str] | None = None,\n    fmt: str = 'g',\n) -&gt; None\n</code></pre> <p>Set ticks of a colorbar to the min and max values of the data.</p> <p>Parameters:</p> <ul> <li> <code>cbar</code>               (<code>Colorbar</code>)           \u2013            <p>The colorbar to set the ticks for.</p> </li> <li> <code>labels</code>               (<code>Sequence[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The labels for the ticks. If not given, the minimum and maximum values of the data are used.</p> </li> <li> <code>fmt</code>               (<code>str</code>, default:                   <code>'g'</code> )           \u2013            <p>The format string for the labels. Default is 'g'.</p> </li> </ul> Example <p>See the tutorial on how to add an arrow to a plot.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def cbar_minmax_labels(\n    cbar: matplotlib.colorbar.Colorbar,\n    labels: Sequence[str] | None = None,\n    fmt: str = 'g',\n) -&gt; None:\n    \"\"\"Set ticks of a colorbar to the min and max values of the data.\n\n    Args:\n        cbar: The colorbar to set the ticks for.\n        labels: The labels for the ticks. If not given, the minimum and\n            maximum values of the data are used.\n        fmt: The format string for the labels. Default is 'g'.\n\n    Example:\n        See the tutorial on how to\n        [add an arrow to a plot](../../../tutorials/add_arrow.md).\n    \"\"\"\n    halignments: tuple[Literal['left', 'right'], Literal['left', 'right']] = (\n        'left',\n        'right',\n    )\n    valignments: tuple[Literal['bottom', 'top'], Literal['bottom', 'top']] = (\n        'bottom',\n        'top',\n    )\n    labels = labels or [fmt_num(x, fmt) for x in cbar.mappable.get_clim()]\n    cbar.set_ticks(cbar.mappable.get_clim(), labels=labels)\n    if cbar.orientation == 'horizontal':\n        for halign, label in zip(\n            halignments, cbar.ax.xaxis.get_ticklabels(), strict=True\n        ):\n            label.set_horizontalalignment(halign)\n    elif cbar.orientation == 'vertical':\n        for valign, label in zip(\n            valignments, cbar.ax.yaxis.get_ticklabels(), strict=True\n        ):\n            label.set_verticalalignment(valign)\n</code></pre>"},{"location":"reference/beautiplot/plot/common_lims/","title":"<code>beautiplot.plot.common_lims</code>","text":""},{"location":"reference/beautiplot/plot/common_lims/#beautiplot.plot.common_lims","title":"beautiplot.plot.common_lims","text":"<pre><code>common_lims(\n    axis: Literal['x', 'y'],\n    axes: Sequence[Axes] | ndarray,\n    vmin: float | None = None,\n    vmax: float | None = None,\n) -&gt; None\n</code></pre> <p>Set common limits for a list of axes.</p> <p>Parameters:</p> <ul> <li> <code>axis</code>               (<code>Literal['x', 'y']</code>)           \u2013            <p>The axis to set the limits for ('x' or 'y').</p> </li> <li> <code>axes</code>               (<code>Sequence[Axes] | ndarray</code>)           \u2013            <p>The list of axes to set the limits for.</p> </li> <li> <code>vmin</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>The minimum limit.</p> </li> <li> <code>vmax</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>The maximum limit.</p> </li> </ul> Example <p>See the common limits example.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def common_lims(\n    axis: Literal['x', 'y'],\n    axes: Sequence[matplotlib.axes.Axes] | np.ndarray,\n    vmin: float | None = None,\n    vmax: float | None = None,\n) -&gt; None:\n    \"\"\"Set common limits for a list of axes.\n\n    Args:\n        axis: The axis to set the limits for ('x' or 'y').\n        axes: The list of axes to set the limits for.\n        vmin: The minimum limit.\n        vmax: The maximum limit.\n\n    Example:\n        See the\n        [common limits example](../../../tutorials/common_lims.md).\n    \"\"\"\n    if isinstance(axes, np.ndarray):\n        axes = axes.ravel()\n    clims = np.array([getattr(ax, f'get_{axis}lim')() for ax in axes])\n    vmin = clims.min() if vmin is None else vmin\n    vmax = clims.max() if vmax is None else vmax\n\n    for ax in axes:\n        getattr(ax, f'set_{axis}lim')(vmin, vmax)\n</code></pre>"},{"location":"reference/beautiplot/plot/discretize_colormap/","title":"<code>beautiplot.plot.discretize_colormap</code>","text":""},{"location":"reference/beautiplot/plot/discretize_colormap/#beautiplot.plot.discretize_colormap","title":"beautiplot.plot.discretize_colormap","text":"<pre><code>discretize_colormap(\n    data: ndarray | Sequence[int],\n    colormap: Colormap | str = name,\n) -&gt; tuple[Colormap, float, float, ndarray]\n</code></pre> <p>Create a discrete colormap from the data.</p> <p>This function can be used to create a colormap that is discretized according to the unique values in the data. It can be used to create a colormap for categorical data, e.g., for regions or clusters in a 2D grid. By default, the ticklabels of the colorbar will be integers from the minimum to the maximum value of the data, but this can be customized by adjusting the returned <code>ticks</code> array or by setting custom tick labels on the colorbar.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>ndarray | Sequence[int]</code>)           \u2013            <p>The data to create the colormap from. It should be a 1D array or a sequence of integers representing the categories or regions. The colormap will be discretized according to the difference between the maximum and minimum values of the data.</p> </li> <li> <code>colormap</code>               (<code>Colormap | str</code>, default:                   <code>name</code> )           \u2013            <p>The colormap to use. If a <code>Colormap</code> object is provided, it will be returned with adjusted ticks according to the data's minimum and maximum values. Otherwise, the name of a colormap known to Matplotlib can be provided as a string, which will be resampled by the difference between the minimum and maximum values of the data to create a discrete colormap.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple</code> (              <code>tuple[Colormap, float, float, ndarray]</code> )          \u2013            <p>A tuple containing:</p> <ul> <li>cmap: The discrete colormap.</li> <li>vmin: The minimum value of the data.</li> <li>vmax: The maximum value of the data.</li> <li>ticks: The ticks of the colormap.</li> </ul> </li> </ul> Example <p>See the discretized colorbar tutorial.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def discretize_colormap(\n    data: np.ndarray | Sequence[int],\n    colormap: mcolors.Colormap | str = config.cmap.name,\n) -&gt; tuple[mcolors.Colormap, float, float, np.ndarray]:\n    \"\"\"Create a discrete colormap from the data.\n\n    This function can be used to create a colormap that is\n    discretized according to the unique values in the data. It can be\n    used to create a colormap for categorical data, e.g., for regions or\n    clusters in a 2D grid. By default, the ticklabels of the colorbar\n    will be integers from the minimum to the maximum value of the data,\n    but this can be customized by adjusting the returned `ticks` array\n    or by setting custom tick labels on the colorbar.\n\n    Args:\n        data: The data to create the colormap from. It should be a\n            1D array or a sequence of integers representing the\n            categories or regions. The colormap will be discretized\n            according to the difference between the maximum and\n            minimum values of the data.\n        colormap: The colormap to use. If a `Colormap` object is\n            provided, it will be returned with adjusted ticks according\n            to the data's minimum and maximum values. Otherwise, the\n            name of a colormap known to Matplotlib can be provided as a\n            string, which will be resampled by the difference between\n            the minimum and maximum values of the data to create a\n            discrete colormap.\n\n    Returns:\n        tuple: A tuple containing:\n\n            - cmap: The discrete colormap.\n            - vmin: The minimum value of the data.\n            - vmax: The maximum value of the data.\n            - ticks: The ticks of the colormap.\n\n    Example:\n        See the\n        [discretized colorbar tutorial](../../../tutorials/discretized_colorbar.md).\n    \"\"\"  # noqa: W505\n    cmap = plt.get_cmap(colormap, np.max(data) - np.min(data) + 1)\n    vmin = np.min(data) - 0.5\n    vmax = np.max(data) + 0.5\n    ticks = np.arange(np.min(data), np.max(data) + 1)\n    return cmap, vmin, vmax, ticks\n</code></pre>"},{"location":"reference/beautiplot/plot/extent/","title":"<code>beautiplot.plot.extent</code>","text":""},{"location":"reference/beautiplot/plot/extent/#beautiplot.plot.extent","title":"beautiplot.plot.extent","text":"<pre><code>extent(\n    data: dict[str, ndarray], x: str = 'x', y: str = 'y'\n) -&gt; tuple[float, float, float, float]\n</code></pre> <p>Calculate the extent of the data.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>dict[str, ndarray]</code>)           \u2013            <p>The data to calculate the extent for.</p> </li> <li> <code>x</code>               (<code>str</code>, default:                   <code>'x'</code> )           \u2013            <p>The x-axis label.</p> </li> <li> <code>y</code>               (<code>str</code>, default:                   <code>'y'</code> )           \u2013            <p>The y-axis label.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[float, float, float, float]</code>           \u2013            <p>The extent of the data as a tuple of (left, right, bottom, top).</p> </li> </ul> Example <p>See the tutorial on how to create a shared colorbar.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def extent(\n    data: dict[str, np.ndarray], x: str = 'x', y: str = 'y'\n) -&gt; tuple[float, float, float, float]:\n    \"\"\"Calculate the extent of the data.\n\n    Args:\n        data: The data to calculate the extent for.\n        x: The x-axis label.\n        y: The y-axis label.\n\n    Returns:\n        The extent of the data as a tuple of (left, right, bottom, top).\n\n    Example:\n        See the tutorial on how to create a\n        [shared colorbar](../../../tutorials/shared_colorbar.md).\n    \"\"\"\n    return tuple(data[x].reshape(-1)[[0, -1]]) + tuple(data[y].reshape(-1)[[0, -1]])\n</code></pre>"},{"location":"reference/beautiplot/plot/fig_hspace/","title":"<code>beautiplot.plot.fig_hspace</code>","text":""},{"location":"reference/beautiplot/plot/fig_hspace/#beautiplot.plot.fig_hspace","title":"beautiplot.plot.fig_hspace","text":"<pre><code>fig_hspace(ax: Axes) -&gt; float\n</code></pre> <p>Calculate the height space between axes.</p> <p>Parameters:</p> <ul> <li> <code>ax</code>               (<code>Axes</code>)           \u2013            <p>The axes to calculate the height space for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>The height space between axes.</p> </li> </ul> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def fig_hspace(ax: matplotlib.axes.Axes) -&gt; float:\n    \"\"\"Calculate the height space between axes.\n\n    Args:\n        ax: The axes to calculate the height space for.\n\n    Returns:\n        float: The height space between axes.\n    \"\"\"\n    if ax.figure is not None:\n        sp = ax.figure.subplotpars\n    else:\n        raise Exception('Figure not found for axes')\n    gs = ax.get_gridspec()\n    if gs is None:\n        raise Exception('Gridspec not found for axes')\n    return sp.hspace * (sp.top - sp.bottom) / (gs.nrows + sp.hspace * (gs.nrows - 1))\n</code></pre>"},{"location":"reference/beautiplot/plot/fig_wspace/","title":"<code>beautiplot.plot.fig_wspace</code>","text":""},{"location":"reference/beautiplot/plot/fig_wspace/#beautiplot.plot.fig_wspace","title":"beautiplot.plot.fig_wspace","text":"<pre><code>fig_wspace(ax: Axes) -&gt; float\n</code></pre> <p>Calculate the width space between axes.</p> <p>Parameters:</p> <ul> <li> <code>ax</code>               (<code>Axes</code>)           \u2013            <p>The axes to calculate the width space for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>The width space between axes.</p> </li> </ul> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def fig_wspace(ax: matplotlib.axes.Axes) -&gt; float:\n    \"\"\"Calculate the width space between axes.\n\n    Args:\n        ax: The axes to calculate the width space for.\n\n    Returns:\n        float: The width space between axes.\n    \"\"\"\n    if ax.figure is not None:\n        sp = ax.figure.subplotpars\n    else:\n        raise Exception('Figure not found for axes')\n    gs = ax.get_gridspec()\n    if gs is None:\n        raise Exception('Gridspec not found for axes')\n    return sp.wspace * (sp.right - sp.left) / (gs.ncols + sp.wspace * (gs.ncols - 1))\n</code></pre>"},{"location":"reference/beautiplot/plot/fmt_num/","title":"<code>beautiplot.plot.fmt_num</code>","text":""},{"location":"reference/beautiplot/plot/fmt_num/#beautiplot.plot.fmt_num","title":"beautiplot.plot.fmt_num","text":"<pre><code>fmt_num(\n    num: int | float | integer | floating, fmt: str = 'g'\n) -&gt; str\n</code></pre> <p>Format a number as a LaTeX number.</p> <p>Parameters:</p> <ul> <li> <code>num</code>               (<code>int | float | integer | floating</code>)           \u2013            <p>The number to format.</p> </li> <li> <code>fmt</code>               (<code>str</code>, default:                   <code>'g'</code> )           \u2013            <p>The format string.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The formatted number.</p> </li> </ul> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def fmt_num(num: int | float | np.integer | np.floating, fmt: str = 'g') -&gt; str:\n    \"\"\"Format a number as a LaTeX number.\n\n    Args:\n        num: The number to format.\n        fmt: The format string.\n\n    Returns:\n        The formatted number.\n    \"\"\"\n    return rf'\\num{{{num:{fmt}}}}'\n</code></pre>"},{"location":"reference/beautiplot/plot/imshow/","title":"<code>beautiplot.plot.imshow</code>","text":""},{"location":"reference/beautiplot/plot/imshow/#beautiplot.plot.imshow","title":"beautiplot.plot.imshow","text":"<pre><code>imshow(\n    ax: Axes,\n    data: ndarray,\n    extent: tuple[float, float, float, float],\n    cmap: str | Colormap = cmap,\n    interp: bool | str = True,\n    **kwargs: Any,\n) -&gt; AxesImage\n</code></pre> <p>Display an image on the axes.</p> <p>Parameters:</p> <ul> <li> <code>ax</code>               (<code>Axes</code>)           \u2013            <p>The axes to display the image on.</p> </li> <li> <code>data</code>               (<code>ndarray</code>)           \u2013            <p>The image data.</p> </li> <li> <code>extent</code>               (<code>tuple[float, float, float, float]</code>)           \u2013            <p>The extent of the image.</p> </li> <li> <code>cmap</code>               (<code>str | Colormap</code>, default:                   <code>cmap</code> )           \u2013            <p>The colormap to use.</p> </li> <li> <code>interp</code>               (<code>bool | str</code>, default:                   <code>True</code> )           \u2013            <p>Whether to interpolate the image.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>ax.imshow</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AxesImage</code>           \u2013            <p>matplotlib.image.AxesImage: The image.</p> </li> </ul> Example <p>See the tutorial on how to create a shared colorbar.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def imshow(\n    ax: matplotlib.axes.Axes,\n    data: np.ndarray,\n    extent: tuple[float, float, float, float],\n    cmap: str | mcolors.Colormap = config.cmap,\n    interp: bool | str = True,\n    **kwargs: Any,\n) -&gt; matplotlib.image.AxesImage:\n    \"\"\"Display an image on the axes.\n\n    Args:\n        ax: The axes to display the image on.\n        data: The image data.\n        extent: The extent of the image.\n        cmap: The colormap to use.\n        interp: Whether to interpolate the image.\n        **kwargs: Additional keyword arguments to pass to `ax.imshow`.\n\n    Returns:\n        matplotlib.image.AxesImage: The image.\n\n    Example:\n        See the tutorial on how to create a\n        [shared colorbar](../../../tutorials/shared_colorbar.md).\n    \"\"\"\n    interpolation = 'spline16' if interp is True else interp if interp else None\n    return ax.imshow(\n        data,\n        cmap=cmap,\n        aspect='auto',\n        interpolation=interpolation,\n        origin='lower',\n        extent=extent,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/beautiplot/plot/legend/","title":"<code>beautiplot.plot.legend</code>","text":""},{"location":"reference/beautiplot/plot/legend/#beautiplot.plot.legend","title":"beautiplot.plot.legend","text":"<pre><code>legend(ax: Axes, *args: Any, **kwargs: Any) -&gt; Legend\n</code></pre> <p>Create a legend with some default options.</p> <p>Parameters:</p> <ul> <li> <code>ax</code>               (<code>Axes</code>)           \u2013            <p>The axes to add the legend to.</p> </li> <li> <code>*args</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Additional arguments to pass to <code>ax.legend</code>.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>ax.legend</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Legend</code>           \u2013            <p>The legend.</p> </li> </ul> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def legend(\n    ax: matplotlib.axes.Axes, *args: Any, **kwargs: Any\n) -&gt; matplotlib.legend.Legend:\n    \"\"\"Create a legend with some default options.\n\n    Args:\n        ax: The axes to add the legend to.\n        *args: Additional arguments to pass to `ax.legend`.\n        **kwargs: Additional keyword arguments to pass to `ax.legend`.\n\n    Returns:\n        The legend.\n    \"\"\"\n    return ax.legend(*args, **(config.legend_setup | kwargs))\n</code></pre>"},{"location":"reference/beautiplot/plot/log/","title":"<code>beautiplot.plot.log</code>","text":""},{"location":"reference/beautiplot/plot/log/#beautiplot.plot.log","title":"beautiplot.plot.log","text":"<pre><code>log(\n    msg: str,\n    *args: str | int | float,\n    **kwargs: str | int | float,\n) -&gt; None\n</code></pre> <p>Log a message.</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>The message to log.</p> </li> <li> <code>*args</code>               (<code>str | int | float</code>, default:                   <code>()</code> )           \u2013            <p>Additional arguments to format the message.</p> </li> <li> <code>**kwargs</code>               (<code>str | int | float</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to format the message.</p> </li> </ul> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def log(msg: str, *args: str | int | float, **kwargs: str | int | float) -&gt; None:\n    \"\"\"Log a message.\n\n    Args:\n        msg: The message to log.\n        *args: Additional arguments to format the message.\n        **kwargs: Additional keyword arguments to format the message.\n    \"\"\"\n    print('  ' + msg.format(*args, **kwargs))\n</code></pre>"},{"location":"reference/beautiplot/plot/markers/","title":"<code>beautiplot.plot.markers</code>","text":""},{"location":"reference/beautiplot/plot/markers/#beautiplot.plot.markers","title":"beautiplot.plot.markers","text":"<pre><code>markers(\n    ax: Axes,\n    x: int | float | ndarray | Sequence[int | float],\n    y: int | float | ndarray | Sequence[int | float],\n    marker: str = 'o',\n    ms: int = 8,\n    mec: str = 'white',\n    mew: float = 0.5,\n    ls: str = 'None',\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Plot markers on the axes.</p> <p>Parameters:</p> <ul> <li> <code>ax</code>               (<code>Axes</code>)           \u2013            <p>The axes to plot on.</p> </li> <li> <code>x</code>               (<code>int | float | ndarray | Sequence[int | float]</code>)           \u2013            <p>The x-coordinates of the markers.</p> </li> <li> <code>y</code>               (<code>int | float | ndarray | Sequence[int | float]</code>)           \u2013            <p>The y-coordinates of the markers.</p> </li> <li> <code>marker</code>               (<code>str</code>, default:                   <code>'o'</code> )           \u2013            <p>The marker style.</p> </li> <li> <code>ms</code>               (<code>int</code>, default:                   <code>8</code> )           \u2013            <p>The marker size.</p> </li> <li> <code>mec</code>               (<code>str</code>, default:                   <code>'white'</code> )           \u2013            <p>The marker edge color.</p> </li> <li> <code>mew</code>               (<code>float</code>, default:                   <code>0.5</code> )           \u2013            <p>The marker edge width.</p> </li> <li> <code>ls</code>               (<code>str</code>, default:                   <code>'None'</code> )           \u2013            <p>The line style.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>ax.plot</code>.</p> </li> </ul> Example <p>See the discretized colorbar tutorial.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def markers(\n    ax: matplotlib.axes.Axes,\n    x: int | float | np.ndarray | Sequence[int | float],\n    y: int | float | np.ndarray | Sequence[int | float],\n    marker: str = 'o',\n    ms: int = 8,\n    mec: str = 'white',\n    mew: float = 0.5,\n    ls: str = 'None',\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Plot markers on the axes.\n\n    Args:\n        ax: The axes to plot on.\n        x: The x-coordinates of the markers.\n        y: The y-coordinates of the markers.\n        marker: The marker style.\n        ms: The marker size.\n        mec: The marker edge color.\n        mew: The marker edge width.\n        ls: The line style.\n        **kwargs: Additional keyword arguments to pass to `ax.plot`.\n\n    Example:\n        See the\n        [discretized colorbar tutorial](../../../tutorials/discretized_colorbar.md).\n    \"\"\"  # noqa: W505\n    ax.plot(x, y, marker=marker, ms=ms, mec=mec, mew=mew, ls=ls, **kwargs)\n</code></pre>"},{"location":"reference/beautiplot/plot/newfig/","title":"<code>beautiplot.plot.newfig</code>","text":""},{"location":"reference/beautiplot/plot/newfig/#beautiplot.plot.newfig","title":"beautiplot.plot.newfig","text":"<pre><code>newfig(\n    width: float = 1.0,\n    aspect: float = aspect,\n    nrows: int = 1,\n    ncols: int = 1,\n    gridspec: bool = False,\n    left: float = 1,\n    right: float = 1,\n    top: float = 1,\n    bottom: float = 1,\n    wspace: float = 6,\n    hspace: float = 6,\n    **kwargs: Any,\n) -&gt; tuple[Figure, Any]\n</code></pre> <p>Create a new figure with some default options.</p> <p>This function creates a new figure. At first, you need to estimate the margins, but you can adjust them later as needed. If you do not specify any margins, the figure will be trimmed to the axes, and tick labels or axis labels won't be visible.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>The width of the figure in textwidths. The given width is multiplied by the width specified in <code>config.width</code>.</p> </li> <li> <code>aspect</code>               (<code>float</code>, default:                   <code>aspect</code> )           \u2013            <p>The aspect ratio of the axes.</p> </li> <li> <code>nrows</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>The number of rows of axes.</p> </li> <li> <code>ncols</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>The number of columns of axes.</p> </li> <li> <code>gridspec</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to use a gridspec.</p> </li> <li> <code>left</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>The left margin in big points (bp).</p> </li> <li> <code>right</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>The right margin in bp.</p> </li> <li> <code>top</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>The top margin in bp.</p> </li> <li> <code>bottom</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>The bottom margin in bp.</p> </li> <li> <code>wspace</code>               (<code>float</code>, default:                   <code>6</code> )           \u2013            <p>The width space between axes in bp.</p> </li> <li> <code>hspace</code>               (<code>float</code>, default:                   <code>6</code> )           \u2013            <p>The height space between axes in bp.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>plt.figure</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Figure, Any]</code>           \u2013            <p>A tuple containing the created figure and axes or gridspec.</p> </li> </ul> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def newfig(\n    width: float = 1.0,\n    aspect: float = config.aspect,\n    nrows: int = 1,\n    ncols: int = 1,\n    gridspec: bool = False,\n    left: float = 1,\n    right: float = 1,\n    top: float = 1,\n    bottom: float = 1,\n    wspace: float = 6,\n    hspace: float = 6,\n    **kwargs: Any,\n) -&gt; tuple[mfigure.Figure, Any]:\n    \"\"\"Create a new figure with some default options.\n\n    This function creates a new figure. At first, you need to estimate\n    the margins, but you can adjust them later as needed. If you do not\n    specify any margins, the figure will be trimmed to the axes, and\n    tick labels or axis labels won't be visible.\n\n    Args:\n        width: The width of the figure in textwidths. The given width is\n            multiplied by the width specified in\n            [`config.width`][beautiplot._config._Config.width].\n        aspect: The aspect ratio of the axes.\n        nrows: The number of rows of axes.\n        ncols: The number of columns of axes.\n        gridspec: Whether to use a gridspec.\n        left: The left margin in big points (bp).\n        right: The right margin in bp.\n        top: The top margin in bp.\n        bottom: The bottom margin in bp.\n        wspace: The width space between axes in bp.\n        hspace: The height space between axes in bp.\n        **kwargs: Additional keyword arguments to pass to `plt.figure`.\n\n    Returns:\n        A tuple containing the created figure and axes or gridspec.\n    \"\"\"\n    if 'gridspec_kw' in kwargs:\n        raise ValueError('gridspec_kw is not supported')\n    kwargs.setdefault('dpi', config.dpi)\n\n    bp = config.bp\n    width *= config.width\n    left, right, top, bottom = left * bp, right * bp, top * bp, bottom * bp\n    wspace, hspace = wspace * bp, hspace * bp\n\n    axes_width = (width - left - right - wspace * (ncols - 1)) / ncols\n    axes_height = axes_width / aspect\n    height = axes_height * nrows + top + bottom + hspace * (nrows - 1)\n\n    if gridspec:\n        gs_kwargs = {\n            name: kwargs.pop(name, None) for name in ('width_ratios', 'height_ratios')\n        }\n        fig = plt.figure(figsize=(width, height), **kwargs)\n        axes_or_gs = fig.add_gridspec(nrows, ncols, **gs_kwargs)\n    else:\n        fig, axes_or_gs = plt.subplots(\n            figsize=(width, height), nrows=nrows, ncols=ncols, **kwargs\n        )\n\n    fig.subplots_adjust(\n        left=left / width,\n        right=1 - right / width,\n        top=1 - top / height,\n        bottom=bottom / height,\n        wspace=wspace / axes_width,\n        hspace=hspace / axes_height,\n    )\n\n    return fig, axes_or_gs\n</code></pre>"},{"location":"reference/beautiplot/plot/save_figure/","title":"<code>beautiplot.plot.save_figure</code>","text":""},{"location":"reference/beautiplot/plot/save_figure/#beautiplot.plot.save_figure","title":"beautiplot.plot.save_figure","text":"<pre><code>save_figure(\n    fig: Figure,\n    file_path: str = 'plot.pdf',\n    close: bool = True,\n) -&gt; None\n</code></pre> <p>Save the figure to a file.</p> <p>This function saves the figure to the output path specified in the <code>config.output_path</code> variable. You can use different file formats by changing the file extension in the <code>file_path</code> argument. For publication-quality figures, you should use <code>pdf</code> as the file format. In case of really large figures, you can still use <code>png</code> to save memory.</p> <p>Parameters:</p> <ul> <li> <code>fig</code>               (<code>Figure</code>)           \u2013            <p>The figure to save.</p> </li> <li> <code>file_path</code>               (<code>str</code>, default:                   <code>'plot.pdf'</code> )           \u2013            <p>The path to save the figure to.</p> </li> <li> <code>close</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to close the figure after saving.</p> </li> </ul> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def save_figure(\n    fig: mfigure.Figure, file_path: str = 'plot.pdf', close: bool = True\n) -&gt; None:\n    \"\"\"Save the figure to a file.\n\n    This function saves the figure to the output path specified in the\n    [`config.output_path`][beautiplot._config._Config.output_path]\n    variable. You can use different file formats by changing the file\n    extension in the `file_path` argument. For publication-quality\n    figures, you should use `pdf` as the file format. In case of really\n    large figures, you can still use `png` to save memory.\n\n    Args:\n        fig: The figure to save.\n        file_path: The path to save the figure to.\n        close: Whether to close the figure after saving.\n    \"\"\"\n    file_ext = Path(file_path).suffix.upper().lstrip('.')\n    log(f'Writing figure to {file_ext}...')\n\n    path = Path(config.output_path) / Path(file_path)\n    path.parent.mkdir(parents=True, exist_ok=True)\n\n    fig.savefig(str(path))\n    if close:\n        plt.close(fig)\n</code></pre>"},{"location":"reference/beautiplot/plot/subfig_label/","title":"<code>beautiplot.plot.subfig_label</code>","text":""},{"location":"reference/beautiplot/plot/subfig_label/#beautiplot.plot.subfig_label","title":"beautiplot.plot.subfig_label","text":"<pre><code>subfig_label(\n    ax: Axes,\n    idx: int | str,\n    ha: Literal['left', 'center', 'right'],\n    x: float,\n    dx: float,\n    va: Literal['top', 'center', 'bottom'],\n    y: float,\n    dy: float,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Add a label to a subplot.</p> <p>Parameters:</p> <ul> <li> <code>ax</code>               (<code>Axes</code>)           \u2013            <p>The axes to add the label to.</p> </li> <li> <code>idx</code>               (<code>int | str</code>)           \u2013            <p>The index of the subplot.</p> </li> <li> <code>ha</code>               (<code>Literal['left', 'center', 'right']</code>)           \u2013            <p>The horizontal alignment.</p> </li> <li> <code>x</code>               (<code>float</code>)           \u2013            <p>The x-coordinate of the label. Here, 0.0 is left and 1.0 is right of the axes.</p> </li> <li> <code>dx</code>               (<code>float</code>)           \u2013            <p>The x-offset of the label. Negative values move the label left, positive values move it right.</p> </li> <li> <code>va</code>               (<code>Literal['top', 'center', 'bottom']</code>)           \u2013            <p>The vertical alignment.</p> </li> <li> <code>y</code>               (<code>float</code>)           \u2013            <p>The y-coordinate of the label. Here, 0.0 is bottom and 1.0 is top of the axes.</p> </li> <li> <code>dy</code>               (<code>float</code>)           \u2013            <p>The y-offset of the label. Negative values move the label down, positive values move it up.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>ax.text</code>.</p> </li> </ul> Example <p>See the tutorial on how to create a shared colorbar.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def subfig_label(\n    ax: matplotlib.axes.Axes,\n    idx: int | str,\n    ha: Literal['left', 'center', 'right'],\n    x: float,\n    dx: float,\n    va: Literal['top', 'center', 'bottom'],\n    y: float,\n    dy: float,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Add a label to a subplot.\n\n    Args:\n        ax (matplotlib.axes.Axes): The axes to add the label to.\n        idx: The index of the subplot.\n        ha: The horizontal alignment.\n        x: The x-coordinate of the label. Here, 0.0 is left and 1.0 is\n            right of the axes.\n        dx: The x-offset of the label. Negative values move the label\n            left, positive values move it right.\n        va: The vertical alignment.\n        y: The y-coordinate of the label. Here, 0.0 is bottom and 1.0 is\n            top of the axes.\n        dy: The y-offset of the label. Negative values move the label\n            down, positive values move it up.\n        **kwargs: Additional keyword arguments to pass to `ax.text`.\n\n    Example:\n        See the tutorial on how to create a\n        [shared colorbar](../../../tutorials/shared_colorbar.md).\n    \"\"\"\n    label = chr(ord('a') + idx) if isinstance(idx, int) else str(idx)\n    text(ax, ha, x, dx, va, y, dy, rf'\\textbf{{({label})}}', **kwargs)\n</code></pre>"},{"location":"reference/beautiplot/plot/text/","title":"<code>beautiplot.plot.text</code>","text":""},{"location":"reference/beautiplot/plot/text/#beautiplot.plot.text","title":"beautiplot.plot.text","text":"<pre><code>text(\n    ax: Axes,\n    ha: Literal['left', 'center', 'right'],\n    x: float,\n    dx: float,\n    va: Literal['top', 'center', 'bottom'],\n    y: float,\n    dy: float,\n    txt: str,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Add text to an axes with relative coordinates.</p> <p>Parameters:</p> <ul> <li> <code>ax</code>               (<code>Axes</code>)           \u2013            <p>The axes to plot on.</p> </li> <li> <code>ha</code>               (<code>Literal['left', 'center', 'right']</code>)           \u2013            <p>The horizontal alignment.</p> </li> <li> <code>x</code>               (<code>float</code>)           \u2013            <p>The x-coordinate of the text. Here, 0.0 is left and 1.0 is right of the axes.</p> </li> <li> <code>dx</code>               (<code>float</code>)           \u2013            <p>The x-offset of the text.</p> </li> <li> <code>va</code>               (<code>Literal['top', 'center', 'bottom']</code>)           \u2013            <p>The vertical alignment.</p> </li> <li> <code>y</code>               (<code>float</code>)           \u2013            <p>The y-coordinate of the text. Here, 0.0 is bottom and 1.0 is top of the axes.</p> </li> <li> <code>dy</code>               (<code>float</code>)           \u2013            <p>The y-offset of the text.</p> </li> <li> <code>txt</code>               (<code>str</code>)           \u2013            <p>The text to add.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>ax.text</code>.</p> </li> </ul> Example <p>See the tutorial on how to add text to a plot.</p> Source code in <code>src/beautiplot/plot.py</code> <pre><code>def text(\n    ax: matplotlib.axes.Axes,\n    ha: Literal['left', 'center', 'right'],\n    x: float,\n    dx: float,\n    va: Literal['top', 'center', 'bottom'],\n    y: float,\n    dy: float,\n    txt: str,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Add text to an axes with relative coordinates.\n\n    Args:\n        ax: The axes to plot on.\n        ha: The horizontal alignment.\n        x: The x-coordinate of the text. Here, 0.0 is left and 1.0 is\n            right of the axes.\n        dx: The x-offset of the text.\n        va: The vertical alignment.\n        y: The y-coordinate of the text. Here, 0.0 is bottom and 1.0 is\n            top of the axes.\n        dy: The y-offset of the text.\n        txt: The text to add.\n        **kwargs: Additional keyword arguments to pass to `ax.text`.\n\n    Example:\n        See the tutorial on how to\n        [add text to a plot](../../../tutorials/add_arrow.md).\n    \"\"\"\n    bp = config.bp\n    if ax.figure is None:\n        raise Exception('Figure not found for axes')\n    trans = ax.transAxes + mtrans.ScaledTranslation(\n        dx * bp, dy * bp, ax.figure.dpi_scale_trans\n    )\n    ax.text(x, y, txt, transform=trans, ha=ha, va=va, **kwargs)\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Here you can find all tutorials on how to use the package and its different functionalities.</p>"},{"location":"tutorials/#list-of-tutorials","title":"List of Tutorials","text":"<ul> <li>Adding an Arrow and Text to a Plot</li> <li>Adjust x-limits to maintain aspect ratio 1</li> <li>Common y-limits</li> <li>Configuration</li> <li>Discretized Colorbar</li> <li>Shared Colorbar</li> </ul>"},{"location":"tutorials/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Adding an Arrow and Text to a Plot</li> <li>Adjust x-limits to maintain aspect ratio 1</li> <li>Common y-limits</li> <li>Configuration</li> <li>Discretized Colorbar</li> <li>Shared Colorbar</li> </ul>"},{"location":"tutorials/add_arrow/","title":"Adding an Arrow and Text to a Plot","text":"<p>This example demonstrates how to add an arrow and text to a plot using the <code>beautiplot</code> library.</p> <p>We start by importing the necessary libraries and defining the configuration for the plot.</p> <pre><code>from pathlib import Path\n\nimport numpy as np\n\nimport beautiplot.plot as bp\nfrom beautiplot import config\n\nroot = Path(__file__).parent.parent\nconfig.output_path = root / 'docs/example_plots'\n</code></pre> <p>Next, we generate some data for the plot. In this example, we create a 2D grid of points and compute a simple function over that grid. The data will be used to create an image plot.</p> <pre><code>x = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = X + Y\n</code></pre> <p>The extent can be calculated using the <code>extent</code> function, which takes a dictionary with keys 'x' and 'y' representing the x and y coordinates of the data.</p> <pre><code>data_dict = {'x': x, 'y': y}\next = bp.extent(data_dict)\n</code></pre> <p>We then create a new figure and axes using the <code>newfig</code> function. At first, you need to estimate the margins, but you can adjust them later if needed. The figure will be trimmed to the axes, and tick labels or axis labels won't be visible unless you specify margins. We use the <code>imshow</code> function to create an image plot of the data. The <code>extent</code> parameter is used to set the limits of the x and y axes, and the <code>cmap</code> parameter specifies the colormap to use for the image. We also set the y-ticks to specific values to demonstrate how to customize the tick labels.</p> <pre><code>fig, ax = bp.newfig(left=36, bottom=30, right=43)\nim = bp.imshow(ax, Z, extent=ext, cmap='viridis')\nax.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9])\n</code></pre> <p>Now, we can add an arrow to the plot using the <code>add_arrow</code> function. This function allows you to specify the starting and ending points of the arrow in normalized coordinates (0 to 1) relative to the axes. The arrow will be drawn from the starting point to the ending point. In this example, we add an arrow from the bottom left to the top right of the axes.</p> <pre><code>bp.add_arrow(ax, (0.1, 0.1), (0.9, 0.9))\n</code></pre> <p>We can also add text to the plot using the <code>text</code> function. This function allows you to specify the position of the text in normalized coordinates, as well as the text itself. In this example, we add text at the top right corner of the axes, indicating that the arrow points to increasing values of <code>x + y</code>.</p> <pre><code>bp.text(ax, ha='right', x=0.92, dx=0, va='bottom', y=0.92, dy=0, txt='Increasing $x+y$')\n</code></pre> <p>To add a colorbar to the plot, we use the <code>cbar_beside</code> function. This function creates a colorbar beside the image plot, and we can also set the minimum and maximum labels for the colorbar using the <code>cbar_minmax_labels</code> function. The colorbar will display the range of values in the image plot, and the labels will indicate the minimum and maximum values of <code>x + y</code>. In addition, we set labels for the x, y axes, and the colorbar.</p> <pre><code>cbar, cax = bp.cbar_beside(fig, ax, im)\nbp.cbar_minmax_labels(cbar)\ncbar.set_label('$x + y$')\nax.set_xlabel('Horizontal Position $x$')\nax.set_ylabel('Vertical Position $y$')\n</code></pre> <p>Finally, we save the figure using the <code>save_figure</code> function. This function saves the figure to the specified output path with a given filename. Here, we us <code>png</code> for visualization purposes, but you should use <code>pdf</code> for publication-quality figures.</p> <pre><code>bp.save_figure(fig, 'arrow_text_example.png')\n</code></pre> <p></p>"},{"location":"tutorials/auto_xlim_aspect_1/","title":"Adjust x-limits to maintain aspect ratio 1","text":"<p>This example demonstrates how to adjust the x-limits of a plot to maintain an aspect ratio of 1. This is useful whenever you want that one unit on the x-axis is the same length as one unit on the y-axis. This is important for example in the following cases:</p> <ul> <li>Visualizing geometric shapes: Circles, squares, or any object where   equal scaling is needed (e.g., plotting a circle should look round,   not elliptical).</li> <li>Physical simulations: When plotting spatial domains (e.g.,   diffusion, wave, or field simulations) where distances in x and y   should be directly comparable.</li> </ul> <p>We start by importing the necessary libraries and setting up the configuration for the plots.</p> <pre><code>from pathlib import Path\n\nimport numpy as np\n\nimport beautiplot.plot as bp\nfrom beautiplot import config\n\nroot = Path(__file__).parent.parent\nconfig.output_path = root / 'docs/example_plots'\n</code></pre> <p>We define the data for the plot. In this case, we create a sine wave but switch the x and y axes to demonstrate the aspect ratio adjustment.</p> <pre><code>y = np.linspace(-2, 2, 100)\nx = np.sin(y)\n</code></pre> <p>We then create a new figure with the specified margins. In the beginning, you need to guess the margins and spacing, but you can adjust them later if needed.</p> <pre><code>fig, ax = bp.newfig(left=34, bottom=20, top=5)\n</code></pre> <p>Next, we plot the data. We set the y-limits to ensure that the plot has a range of -2 to 2, which is important for the aspect ratio adjustment.</p> <pre><code>ax.plot(x, y)\nax.set_ylim(-2, 2)\n</code></pre> <p>We save the figure with the standard x-limits to show the initial state of the plot.</p> <pre><code>bp.save_figure(fig, 'standard_xlim.png')\n</code></pre> <p></p> <p>Now, we can adjust the x-limits to maintain an aspect ratio of 1 with the <code>auto_xlim_aspect_1</code> function.</p> <pre><code>bp.auto_xlim_aspect_1(ax)\nbp.save_figure(fig, 'auto_xlim_aspect_1.png')\n</code></pre> <p></p>"},{"location":"tutorials/common_lims/","title":"Common y-limits","text":"<p>This example demonstrates how to set common y-limits for multiple subplots in a grid layout using the <code>beautiplot</code> library. This is particularly useful when you want to compare data across different subplots and ensure that the y-axis scales are consistent, especially when there are multiple subplots with different data ranges.</p> <p>We start by importing the necessary libraries and defining the configuration for the plots.</p> <pre><code>from pathlib import Path\n\nimport numpy as np\n\nimport beautiplot.plot as bp\nfrom beautiplot import config\n\nroot = Path(__file__).parent.parent\nconfig.output_path = root / 'docs/example_plots'\n</code></pre> <p>Next, we define the data for the subplots. In this example, we create four subplots, each with different sine and cosine functions. The x values are the same for all subplots, but the y values differ.</p> <pre><code>x = np.linspace(0, 7, 100)\ny1 = np.sin(x)\ny2 = 2 * np.cos(x)\ny3 = 3 * np.sin(x)\ny4 = 4 * np.cos(x)\n</code></pre> <p>We then create a new figure with a grid of subplots using the <code>newfig</code> function. In the beginning, you need to guess the margins and spacing, but you can adjust them later if needed.</p> <pre><code>fig, axes = bp.newfig(nrows=2, ncols=2, left=26, bottom=20)\n</code></pre> <p>Next, we plot the data on each subplot. We also remove the x-tick labels for the first row and the y-tick labels for the second column to make the plots cleaner.</p> <pre><code>axes[0, 0].plot(x, y1, label=r'$\\sin(x)$')\naxes[0, 0].set_xticklabels([])\naxes[0, 1].plot(x, y2, label=r'$2\\cdot\\cos(x)$')\naxes[0, 1].set_xticklabels([])\naxes[0, 1].set_yticklabels([])\naxes[1, 0].plot(x, y3, label=r'$3\\cdot\\sin(x)$')\naxes[1, 1].plot(x, y4, label=r'$4\\cdot\\cos(x)$')\naxes[1, 1].set_yticklabels([])\n</code></pre> <p>We add legends to each subplot to identify the functions plotted.</p> <pre><code>for ax in axes.flat:\n    bp.legend(ax)\n</code></pre> <p>Now, we can set common y-limits for each row of subplots. This ensures that the y-axis scales are consistent across the subplots in each row.</p> <pre><code>bp.common_lims('y', axes[0, :])\nbp.common_lims('y', axes[1, :])\nbp.save_figure(fig, 'common_lims_rows.png')\n</code></pre> <p></p> <p>Alternatively, we can set common y-limits for all subplots in the grid. This is useful when you want to compare all subplots directly.</p> <pre><code>bp.common_lims('y', axes)\nbp.save_figure(fig, 'common_lims.png')\n</code></pre> <p></p>"},{"location":"tutorials/configuration/","title":"Configuration","text":"<p>This file contains an example of how to configure the beautiplot library according to your needs. The configuration allows you to set various parameters such as output paths, font sizes, and other settings that will be applied to all plots created with beautiplot. All configuration options are documented with examples in the <code>config</code> class. Here, we will summarize the most important options and how to use them.</p>"},{"location":"tutorials/configuration/#global-configuration","title":"Global Configuration","text":"<p>We start by importing the necessary instance.</p> <pre><code>import beautiplot.plot as bp\nfrom beautiplot import config\n</code></pre> <p>The <code>config</code> object is an instance of the <code>_Config</code> class, which allows you to set global configuration options.</p> <p>Warning</p> <p>You should never import and instantiate the <code>_Config</code> class directly, but always use the <code>config</code> object provided by the <code>beautiplot</code> module.</p> <p>The <code>output_path</code> option specifies the directory where the plots will be saved. You can set it to any valid path on your system. We will save the plots in a directory called <code>example_plots</code> in the current working directory. If the directory does not exist, it will be created automatically.</p> <pre><code>config.output_path = 'docs/example_plots'\n</code></pre> <p>You should definitely set the width of the plots to the width of your document. This ensures that the text inside the plots has the same size as the text in your document. The width is specified in points (pt) and you can get the width of your document in LaTeX by including</p> <pre><code>\\the\\textwidth\n</code></pre> <p>in your document and compiling it. We will assume that the width of our document is 400pt and set the <code>width</code> option accordingly.</p> <pre><code>config.width = 400\n</code></pre> <p>The default color map used by beautiplot is <code>inferno</code>. You can change it to any other color map supported by Matplotlib or a custom one by using the <code>set_cmap</code><code>method. We will set the color map to</code>viridis`.</p> <pre><code>config.set_cmap('viridis')\n</code></pre>"},{"location":"tutorials/configuration/#plot-specific-configuration","title":"Plot Specific Configuration","text":"<p>You can also set plot-specific configuration options. Most of the functions in the <code>plot</code> module have arguments that, if specified, will override the global configuration or take additional keyword arguments that can be used to customize the plot and override the global configuration.</p> <p>Some examples of plot-specific configuration options are using a different color map, figure width or aspect ratio.</p> <pre><code>fig, axes = bp.newfig(width=0.5, aspect=1.5)\nbp.imshow(axes, [[1, 2], [3, 4]], extent=(0, 1, 0, 1), cmap='plasma')\n</code></pre> <p>The <code>width</code> argument sets the width of the figure to 50% of the global configuration width, and the <code>aspect</code> argument sets the aspect ratio of the figure to 1.5. The <code>cmap</code> argument overrides the global color map setting and uses <code>plasma</code> for this specific plot.</p>"},{"location":"tutorials/discretized_colorbar/","title":"Discretized Colorbar","text":"<p>This example demonstrates how to create a discretized colormap for categorical data, such as regions or clusters in a 2D grid. The colormap is created based on the maximum and minimum values of the data, and the colorbar is displayed above the plot.</p> <p>We start by importing the necessary libraries and defining the configuration for the plot.</p> <pre><code>from pathlib import Path\n\nimport numpy as np\n\nimport beautiplot.plot as bp\nfrom beautiplot import config\n\nroot = Path(__file__).parent.parent\nconfig.output_path = root / 'docs/example_plots'\n</code></pre> <p>Next, we define the data for the plot. In this example, we create a grid of points and assign each point to a region based on its proximity to predefined attractors. The regions are represented by integers, which will be used to create a discretized colormap.</p> <pre><code>x = np.linspace(-2.1, 2.1, 1000)\ny = np.linspace(-2.1, 2.1, 1000)\nX, Y = np.meshgrid(x, y)\nattractors = np.array([[1, 1], [-1, -1], [1, -1]])\nmarker_x, marker_y = attractors[:, 0], attractors[:, 1]\ndistances = np.stack([np.sqrt((X - px) ** 2 + (Y - py) ** 2) for px, py in attractors])\nregions = np.argmin(distances, axis=0)\n</code></pre> <p>To visualize the regions, we use the <code>discretize_colormap</code> function. This function is designed for arrays of integers, such as region or category indices. It automatically creates a colormap with a distinct color for each integer value in the data. The number of colors is determined by the difference between the minimum and maximum values in the array. The colorbar ticks are placed in the center of each color segment, and the tick labels correspond to the integer values present in the data.</p> <pre><code>cmap, vmin, vmax, ticks = bp.discretize_colormap(regions, 'plasma')\n</code></pre> <p>We also define the extent of the data for the imshow plot using the <code>extent</code> function.</p> <pre><code>data_dict = {'x': x, 'y': y}\next = bp.extent(data_dict)\n</code></pre> <p>Then, we create a new figure and axis using the <code>newfig</code> function. At first, we need to estimate the margins, but we can adjust them later if needed. We plot the regions using the <code>imshow</code> function, which displays the regions with the discretized colormap.</p> <pre><code>fig, ax = bp.newfig(left=42, bottom=28, top=46)\nim = bp.imshow(ax, regions, extent=ext, cmap=cmap, vmin=vmin, vmax=vmax)\n</code></pre> <p>We also add markers for the attractors using the <code>markers</code> function.</p> <pre><code>bp.markers(ax, marker_x, marker_y, label='Attractors')\n</code></pre> <p>We set the x and y labels.</p> <pre><code>ax.set_xlabel('x')\nax.set_ylabel('y')\n</code></pre> <p>Here, we create a colorbar above the plot using the <code>cbar_above</code> function. The colorbar is labeled with \"Region Index\", and the ticks are set to the unique values of the regions.</p> <pre><code>cbar, cax = bp.cbar_above(fig, ax, im, ticks=ticks)\ncbar.set_label('Region Index')\n</code></pre> <p>Finally, we add a legend to the plot using the <code>legend</code> function, and we save the figure using the <code>save_figure</code> function.</p> <pre><code>bp.legend(ax)\nbp.save_figure(fig, 'voronoi_attractors.png')\n</code></pre> <p></p>"},{"location":"tutorials/shared_colorbar/","title":"Shared Colorbar","text":"<p>This example demonstrates how to create a grid of subplots with a shared colorbar using the <code>beautiplot</code> library. The subplots display the probability densities of a 2D quantum harmonic oscillator.</p> <p>We start by importing necessary libraries and setting up the configuration for the plots.</p> <pre><code>from pathlib import Path\n\nimport numpy as np\nfrom scipy.special import factorial, hermite\n\nimport beautiplot.plot as bp\nfrom beautiplot import config\n\nroot = Path(__file__).parent.parent\nconfig.output_path = root / 'docs/example_plots'\nconfig.fontsize = 11\n</code></pre> <p>Next, we define the parameters for the 2D grid of subplots and the quantum states we want to visualize.</p> <pre><code>nx, ny = 100, 100\nx = np.linspace(-4, 4, nx)\ny = np.linspace(-4, 4, ny)\nX, Y = np.meshgrid(x, y)\nstates = [(0, 0), (1, 0), (0, 1), (1, 1)]\n</code></pre> <p>To ensuure that all subplots have the same extent, we calculate the extent of the data using the <code>extent</code> function.</p> <pre><code>data_dict = {'x': x, 'y': y}\next = bp.extent(data_dict)\n</code></pre> <p>The <code>psi_2d</code> function computes the normalized wavefunction of the 2D quantum harmonic oscillator for given quantum numbers <code>nx</code> and <code>ny</code>. It uses the Hermite polynomials and the Gaussian function.</p> <pre><code>def psi_2d(nx, ny, X, Y):\n    Hx = hermite(nx)(X)\n    Hy = hermite(ny)(Y)\n    norm = 1.0 / np.sqrt(np.pi * 2 ** (nx + ny) * factorial(nx) * factorial(ny))\n    return norm * Hx * Hy * np.exp(-0.5 * (X**2 + Y**2))\n</code></pre> <p>To start plotting, we create a new figure with a grid of subplots. In the beginning, you need to guess the margins and spacing, but you can adjust them later if needed.</p> <pre><code>fig, axes = bp.newfig(\n    nrows=2, ncols=2, left=38, bottom=34, top=38, right=63, wspace=18, hspace=25\n)\n</code></pre> <p>We want to label each subplot with a subfigure label. The <code>label positions</code> list defines the positions of the labels in each subplot.</p> <pre><code>label_positions = [\n    ('right', 0.0, -22, 'bottom', 1.0, 3),\n    ('right', 0.0, 0, 'bottom', 1.0, 3),\n    ('right', 0.0, -22, 'bottom', 1.0, 3),\n    ('right', 0.0, 0, 'bottom', 1.0, 3),\n]\n</code></pre> <p>We then iterate over the quantum states, compute the wavefunction, and plot the probability density in each subplot. The <code>imshow</code> function is used to display the data as an image. The bounding box in data coordinates that the image will fill is controlled by the <code>extent</code> parameter. Thus, we can use the <code>extent</code> calculated earlier to ensure all subplots have the same extent. The <code>subfig_label</code> function adds the subfigure label to each subplot. The titles of the subplots are set to indicate the quantum numbers. You can use LaTeX formatting for the titles and labels. We store the images in a list to later set the same color limits for all subplots.</p> <pre><code>ims = []\nfor i, (n_x, n_y) in enumerate(states):\n    psi = psi_2d(n_x, n_y, X, Y)\n    prob_density = np.abs(psi) ** 2\n    ax = axes.flat[i]\n    im = bp.imshow(ax, prob_density, extent=ext)\n    bp.subfig_label(ax, i, *label_positions[i])\n    ax.set_title(f'$n_x={n_x}, n_y={n_y}$', fontsize=11)\n    ims.append(im)\n</code></pre> <p>After plotting, we set the x and y labels for the subplots. To reduce clutter, we can remove the x-tick labels for the top subplots and the y-tick labels for the right subplots.</p> <pre><code>for i in range(2):\n    axes[0, i].set_xticklabels([])\n    axes[i, 1].set_yticklabels([])\n    axes[i, 0].set_ylabel('$y$ / a.u.')\n    axes[1, i].set_xlabel('$x$ / a.u.')\n</code></pre> <p>We calculate the maximum value of the probability densities across all subplots to set a common color limit for the colorbar. This ensures that the color mapping is consistent across all subplots. If you already have the data before plotting (in our case, <code>prob_density</code> before the loop), you can directly use the maximum and minimum values of the data to set the color limitsin the <code>imshow</code> function via the <code>vmin</code> and <code>vmax</code> parameters.</p> <pre><code>vmax = max(im.get_array().max() for im in ims)\nfor im in ims:\n    im.set_clim(0, vmax)\n</code></pre> <p>Finally, we create a colorbar beside the grid of subplots using the <code>cbar_beside</code> function. By storing the returned colorbar and axis in two variables, we can set a label for the colorbar.</p> <pre><code>cbar, cax = bp.cbar_beside(fig, axes, ims[0], dx=0.02)\ncbar.set_label(r'Probability Density $|\\psi(x, y)|^2$')\n</code></pre> <p>We add a title to the figure and store it in a file. Here, we use <code>png</code> for visualization reasons, but you should use <code>pdf</code> or <code>svg</code> for publication-quality figures. In case of really large figures, memory wise, you can still use <code>png</code> to save memory. The <code>save_figure</code> function saves the figure in the directory specified in the <code>config.output_path</code>. The filename is specified as the second argument.</p> <pre><code>fig.suptitle('2D Quantum Harmonic Oscillator Probability Densities')\nbp.save_figure(fig, '2d_quantum_harmonic_oscillator.png')\n</code></pre> <p></p>"}]}